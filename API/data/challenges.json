{
    "1": {
        "description": "echo stdin",
        "tags": [
            "strings",
            "easy"
        ],
        "io": {
            "not-test":"not-test",
            "test":"test"
        }
    },
    "2": {
        "description": "reverse the string",
        "tags": [
            "strings",
            "easy"
        ],
        "io": {
            "1": "1",
            "toggle": "elggot",
            "pop": "pop"
        }
    },
    "3": {
        "description": "is it a palindrome?",
        "tags": [
            "strings",
            "medium"
        ],
        "io": {
            "bob": "true",
            "canal": "false",
            "a man, a plan, a canal: panama!": "true",
            "boot": "false",
            "":"false"
        }
    },
    "4": {
        "description": "calculate hamming distance",
        "tags": [
            "strings",
            "medium"
        ],
        "io": {
            "GATTACA\tGATTACA": "0",
            "GG\tAA": "2",
            "ACCAGGG\tACTATGG": "2",
            "TAGC\tCGAT":"4",
            "AATG\tAAA": "-1"
        }
    },
    "5": {
        "description": "is it an isogram?",
        "tags": [
            "strings",
            "medium"
        ],
        "io":{
            "isogram":"true",
            "eleven":"false",
            "Alphabet":"false",
            "six-year-old":"true",
            "accentor":"false"
        }
    },
    "6": {
        "description": "difference between the square of the sum and the sum of the squares of the first N natural numbers",
        "tags": [
            "math",
            "medium"
        ],
        "io":{
            "1":"0",
            "5":"170",
            "100":"25164150"
        }
    },
    "7": {
        "description": "make an acronym",
        "tags": [
            "strings",
            "medium"
        ],
        "io": {
            "Portable Network Graphics":"PNG",
            "Ruby on Rails":"ROR",
            "First In, First Out":"FIFO",
            "PHP: Hypertext Preprocessor":"PHP",
            "GNU Image Manipulation Program":"GIMP",
            "Complementary metal-oxide semiconductor":"CMOS"
        }
    },
    "8": {
        "description": "validate phone numbers",
        "tags": [
            "validation",
            "medium"
        ],
        "io": {
            "(123) 456-7890":"1234567890",
            "123.456.7890":"1234567890",
            "123456789":"error",
            "11234567890":"1234567890",
            "123-@:!-7890":"error"
        }
    },
    "9": {
        "description": "atbash cipher",
        "tags": [
            "crypto",
            "hard"
        ],
        "io": {
            "encode\tno":"ml",
            "encode\tmindblowingly": "nrmwy oldrm tob",
            "encode\tTruth is fiction.": "gifgs rhurx grlm",
            "decode\tzmlyh gzxov rhlug vmzhg vkkrm thglm v": "anobstacleisoftenasteppingstone",
            "decode\tgvhgr mt123 gvhgr mt": "testing123testing"
        }
    },
    "10": {
        "description": "can these queens attack each other?",
        "tags": [
            "chess",
            "hard"
        ],
        "io": {
            "b4\tb4": "false",
            "a8\tb9": "false",
            "b4\tb7": "true",
            "a1\tf6": "true",
            "b3\td7": "false"
        }
    },
    "11": {
        "description": "find the last element of a list",
        "tags": [
            "lists",
            "easy"
        ],
        "io": {
            "[1,2,3,4,5,6]":"6",
            "[1]":"1",
            "[\"foo\", \"bar\", \"baz\"]": "baz",
            "['a','b']":"b"
        }
    },
    "12": {
        "description": "find the last element (but one!) of a list",
        "tags": [
            "lists",
            "easy"
        ],
        "io": {
            "[1,2,3,4,5,6]":"5",
            "[\"foo\", \"bar\", \"baz\"]": "bar",
            "['a','b']":"a"
        }
    },
    "13": {
        "description": "find the nth element (1-indexed) of a list",
        "tags": [
            "lists",
            "easy"
        ],
        "io": {
            "[1,2,3,4,5,6]\t3":"3",
            "[\"foo\", \"bar\", \"baz\"]\t1": "foo",
            "['a','b']\t2":"b",
            "[1]\t1":"1"
        }
    },
    "14": {
        "description": "flatten a list",
        "tags": [
            "lists",
            "medium"
        ],
        "io": {
            "[1,[2,3]]":"[1,2,3]",
            "[1,2]":"[1,2]",
            "[]":"[]",
            "[[[3]]]":"[3]",
            "[4,[5,[6],6],8]":"[4,5,6,6,8]"
        }
    },
    "15": {
        "description": "eliminate consectutive duplicates in a list",
        "tags": [
            "lists",
            "medium"
        ],
        "io": {
            "1111":"1",
            "11223344":"1234",
            "111121111":"121"
        }
    },
    "16": {
        "description": "pack consecutive duplicates into sublists",
        "tags": [
            "lists",
            "medium"
        ],
        "io": {
            "1111":"[1111]",
            "11223344":"[11,22,33,44]",
            "111121111":"[1111,2,1111]"
        }
    },
    "17": {
        "description": "pack consectutive duplicates into a run length encoding list; singletons should be tagged with a number",
        "tags": [
            "lists",
            "hard"
        ],
        "io": {
            "1":"[(1,1)]",
            "1111":"[(4,1)]",
            "11223344":"[(2,1),(2,2),(2,3),(2,4)]",
            "111121111":"[(4,1),(1,2),(4,1)]"
        }
    },
    "18": {
        "description": "pack consectutive duplicates into a run length encoding list; singletons should *not* be tagged with a number",
        "tags": [
            "lists",
            "hard"
        ],
        "io": {
            "1":"[1]",
            "1111":"[(4,1)]",
            "112334":"[(2,1),2,(2,3),4]",
            "111121111":"[(4,1),2,(4,1)]"
        }
    },
    "19": {
        "description": "decode a run length encoding list",
        "tags": [
            "lists",
            "hard"
        ],
        "io": {
            "[1]":"1",
            "[(4,1)]":"1111",
            "[(2,1),2,(2,3),4]":"112334",
            "[(4,1),2,(4,1)]":"111121111"
        }
    },
    "20": {
        "description": "duplicate each character of a string",
        "tags": [
            "lists",
            "medium"
        ],
        "io": {
            "123":"112233",
            "abc":"aabbcc",
            "aabbcc":"aaaabbbbcccc",
            "*":"**"
        }
    }
}
